{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n// Mock data import (for demo mode)\nconst generateMockEmails = () => {\n  const getTimeAgo = (daysAgo, hoursAgo = 0) => {\n    if (daysAgo === 0 && hoursAgo < 1) return 'Just now';\n    if (daysAgo === 0) return hoursAgo + 'h ago';\n    if (daysAgo === 1) return 'Yesterday';\n    if (daysAgo < 7) return daysAgo + 'd ago';\n    return Math.floor(daysAgo / 7) + 'w ago';\n  };\n  return [\n  // Sample emails for demo - using the same data from App.js\n  {\n    id: 'demo-1',\n    type: 'caregiver',\n    state: 'unseen',\n    priority: 'critical',\n    hpa: 'Sign & Send',\n    kid: {\n      name: 'Sophie Martinez',\n      initial: 'S',\n      grade: '3rd Grade'\n    },\n    timeAgo: getTimeAgo(0, 2),\n    title: 'Field Trip Permission - Due Wednesday',\n    summary: 'Museum visit Friday requires signed form by Wed 5 PM',\n    metaCTA: 'Swipe Right: Quick Sign & Send',\n    requiresSignature: true,\n    formFields: [{\n      label: 'Student Name',\n      autoFillValue: 'Sophie Martinez'\n    }, {\n      label: 'Parent/Guardian',\n      autoFillValue: 'Parent Name'\n    }, {\n      label: 'Emergency Contact',\n      autoFillValue: '(555) 123-4567'\n    }],\n    dataSources: [{\n      subject: 'Field Trip Permission',\n      from: 'Mrs. Anderson',\n      date: getTimeAgo(0, 2)\n    }]\n  }];\n};\nclass EmailAdapter {\n  constructor() {\n    this.demoMode = true;\n    this.userEmail = null;\n    this.apiClient = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // Toggle between demo and real data\n  setDemoMode(enabled) {\n    this.demoMode = enabled;\n  }\n\n  // Set user email for real data mode\n  setUserEmail(email) {\n    this.userEmail = email;\n  }\n\n  // Get emails (demo or real)\n  async getEmails(maxResults = 50) {\n    if (this.demoMode) {\n      return generateMockEmails();\n    }\n    if (!this.userEmail) {\n      throw new Error('User email not set for real data mode');\n    }\n    try {\n      const response = await this.apiClient.get(`/api/users/${this.userEmail}/emails`, {\n        params: {\n          maxResults\n        }\n      });\n      return this.transformBackendEmails(response.data.emails);\n    } catch (error) {\n      console.error('Error fetching real emails:', error);\n      // Fallback to demo mode on error\n      this.demoMode = true;\n      return generateMockEmails();\n    }\n  }\n\n  // Transform backend email format to SwipeFeed format\n  transformBackendEmails(backendEmails) {\n    return backendEmails.map(email => ({\n      id: email.id,\n      type: this.mapToArchetype(email),\n      state: 'unseen',\n      priority: this.determinePriority(email),\n      hpa: this.generateHPA(email),\n      timeAgo: this.formatTimeAgo(email.internalDate),\n      title: email.subject || 'No Subject',\n      summary: email.denoisedSnippet || email.snippet || 'No preview available',\n      metaCTA: this.generateMetaCTA(email),\n      dataSources: [{\n        subject: email.subject,\n        from: email.from,\n        date: email.date\n      }],\n      // Add archetype-specific fields based on email content\n      ...this.extractArchetypeFields(email)\n    }));\n  }\n\n  // Map email to archetype (simplified - would use AI classification in production)\n  mapToArchetype(email) {\n    const subject = (email.subject || '').toLowerCase();\n    const from = (email.from || '').toLowerCase();\n    if (subject.includes('field trip') || subject.includes('school') || from.includes('school')) {\n      return 'caregiver';\n    }\n    if (subject.includes('demo') || subject.includes('sales') || from.includes('sales')) {\n      return 'sales_hunter';\n    }\n    if (subject.includes('budget') || subject.includes('approval') || from.includes('finance')) {\n      return 'transactional_leader';\n    }\n    if (subject.includes('deal') || subject.includes('sale') || from.includes('deals')) {\n      return 'deal_stacker';\n    }\n    if (subject.includes('flight') || subject.includes('check-in') || from.includes('airlines')) {\n      return 'status_seeker';\n    }\n    if (subject.includes('password') || subject.includes('security') || from.includes('security')) {\n      return 'identity_manager';\n    }\n    if (subject.includes('project') || subject.includes('milestone') || from.includes('client')) {\n      return 'project_coordinator';\n    }\n    return 'enterprise_innovator'; // Default to learning\n  }\n\n  // Determine priority based on email content\n  determinePriority(email) {\n    const subject = (email.subject || '').toLowerCase();\n    const snippet = (email.snippet || '').toLowerCase();\n    if (subject.includes('urgent') || subject.includes('asap') || subject.includes('immediate')) {\n      return 'critical';\n    }\n    if (subject.includes('important') || subject.includes('due') || snippet.includes('deadline')) {\n      return 'high';\n    }\n    if (subject.includes('fyi') || subject.includes('newsletter') || subject.includes('update')) {\n      return 'low';\n    }\n    return 'medium'; // Default\n  }\n\n  // Generate High Priority Action\n  generateHPA(email) {\n    const archetype = this.mapToArchetype(email);\n    const priority = this.determinePriority(email);\n    if (priority === 'critical') {\n      switch (archetype) {\n        case 'caregiver':\n          return 'Sign & Send';\n        case 'sales_hunter':\n          return 'Schedule Demo';\n        case 'transactional_leader':\n          return 'Review & Approve';\n        case 'identity_manager':\n          return 'Verify Identity';\n        default:\n          return 'Take Action';\n      }\n    }\n    switch (archetype) {\n      case 'caregiver':\n        return 'Acknowledge';\n      case 'sales_hunter':\n        return 'Route to CRM';\n      case 'transactional_leader':\n        return 'Auto-Route';\n      case 'deal_stacker':\n        return 'Claim Deal';\n      case 'status_seeker':\n        return 'Check In Now';\n      case 'identity_manager':\n        return 'Confirm or Deny';\n      case 'project_coordinator':\n        return 'File by Project';\n      case 'enterprise_innovator':\n        return 'Save for Later';\n      default:\n        return 'Review';\n    }\n  }\n\n  // Generate meta-CTA\n  generateMetaCTA(email) {\n    const hpa = this.generateHPA(email);\n    const archetype = this.mapToArchetype(email);\n    if (archetype === 'deal_stacker' || archetype === 'status_seeker') {\n      return `Swipe Right: ${hpa}`;\n    }\n    return `Swipe Right: ${hpa}`;\n  }\n\n  // Extract archetype-specific fields\n  extractArchetypeFields(email) {\n    const archetype = this.mapToArchetype(email);\n    const fields = {};\n\n    // Add archetype-specific data extraction logic here\n    // For now, return basic structure\n\n    return fields;\n  }\n\n  // Format timestamp\n  formatTimeAgo(internalDate) {\n    if (!internalDate) return 'Unknown';\n    const emailDate = new Date(parseInt(internalDate));\n    const now = new Date();\n    const diffMs = now - emailDate;\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    if (diffHours < 1) return 'Just now';\n    if (diffHours < 24) return `${diffHours}h ago`;\n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays}d ago`;\n    return `${Math.floor(diffDays / 7)}w ago`;\n  }\n\n  // Check if user has valid credentials\n  async checkAuthentication(userEmail) {\n    try {\n      const response = await this.apiClient.get(`/api/users/${userEmail}/status`);\n      return response.data.hasCredentials;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Get available user accounts\n  async getAvailableAccounts() {\n    try {\n      // This would list available credential files\n      // For now, return the known accounts from your setup\n      return [{\n        email: 'hanson@rationalework',\n        displayName: 'Hanson (Work)'\n      }, {\n        email: 'thematthanson@gmail.com',\n        displayName: 'Matt (Personal)'\n      }];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  // Process emails through backend pipeline\n  async processEmails(userEmail, options = {}) {\n    try {\n      const response = await this.apiClient.post(`/api/users/${userEmail}/process`, {\n        maxEmails: options.maxEmails || 50,\n        outputFormats: ['card'],\n        includeMultipleFormats: false\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error processing emails:', error);\n      throw error;\n    }\n  }\n}\nexport default new EmailAdapter();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","generateMockEmails","getTimeAgo","daysAgo","hoursAgo","Math","floor","id","type","state","priority","hpa","kid","name","initial","grade","timeAgo","title","summary","metaCTA","requiresSignature","formFields","label","autoFillValue","dataSources","subject","from","date","EmailAdapter","constructor","demoMode","userEmail","apiClient","create","baseURL","timeout","headers","setDemoMode","enabled","setUserEmail","email","getEmails","maxResults","Error","response","get","params","transformBackendEmails","data","emails","error","console","backendEmails","map","mapToArchetype","determinePriority","generateHPA","formatTimeAgo","internalDate","denoisedSnippet","snippet","generateMetaCTA","extractArchetypeFields","toLowerCase","includes","archetype","fields","emailDate","Date","parseInt","now","diffMs","diffHours","diffDays","checkAuthentication","hasCredentials","getAvailableAccounts","displayName","processEmails","options","post","maxEmails","outputFormats","includeMultipleFormats"],"sources":["/Users/matthanson/EmailShortForm_01/swipe-app/src/services/emailAdapter.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n// Mock data import (for demo mode)\nconst generateMockEmails = () => {\n  const getTimeAgo = (daysAgo, hoursAgo = 0) => {\n    if (daysAgo === 0 && hoursAgo < 1) return 'Just now';\n    if (daysAgo === 0) return hoursAgo + 'h ago';\n    if (daysAgo === 1) return 'Yesterday';\n    if (daysAgo < 7) return daysAgo + 'd ago';\n    return Math.floor(daysAgo / 7) + 'w ago';\n  };\n\n  return [\n    // Sample emails for demo - using the same data from App.js\n    { id: 'demo-1', type: 'caregiver', state: 'unseen', priority: 'critical', hpa: 'Sign & Send', kid: { name: 'Sophie Martinez', initial: 'S', grade: '3rd Grade' }, timeAgo: getTimeAgo(0, 2), title: 'Field Trip Permission - Due Wednesday', summary: 'Museum visit Friday requires signed form by Wed 5 PM', metaCTA: 'Swipe Right: Quick Sign & Send', requiresSignature: true, formFields: [{ label: 'Student Name', autoFillValue: 'Sophie Martinez' }, { label: 'Parent/Guardian', autoFillValue: 'Parent Name' }, { label: 'Emergency Contact', autoFillValue: '(555) 123-4567' }], dataSources: [{ subject: 'Field Trip Permission', from: 'Mrs. Anderson', date: getTimeAgo(0, 2) }] }\n  ];\n};\n\nclass EmailAdapter {\n  constructor() {\n    this.demoMode = true;\n    this.userEmail = null;\n    this.apiClient = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  // Toggle between demo and real data\n  setDemoMode(enabled) {\n    this.demoMode = enabled;\n  }\n\n  // Set user email for real data mode\n  setUserEmail(email) {\n    this.userEmail = email;\n  }\n\n  // Get emails (demo or real)\n  async getEmails(maxResults = 50) {\n    if (this.demoMode) {\n      return generateMockEmails();\n    }\n\n    if (!this.userEmail) {\n      throw new Error('User email not set for real data mode');\n    }\n\n    try {\n      const response = await this.apiClient.get(`/api/users/${this.userEmail}/emails`, {\n        params: { maxResults }\n      });\n      \n      return this.transformBackendEmails(response.data.emails);\n    } catch (error) {\n      console.error('Error fetching real emails:', error);\n      // Fallback to demo mode on error\n      this.demoMode = true;\n      return generateMockEmails();\n    }\n  }\n\n  // Transform backend email format to SwipeFeed format\n  transformBackendEmails(backendEmails) {\n    return backendEmails.map(email => ({\n      id: email.id,\n      type: this.mapToArchetype(email),\n      state: 'unseen',\n      priority: this.determinePriority(email),\n      hpa: this.generateHPA(email),\n      timeAgo: this.formatTimeAgo(email.internalDate),\n      title: email.subject || 'No Subject',\n      summary: email.denoisedSnippet || email.snippet || 'No preview available',\n      metaCTA: this.generateMetaCTA(email),\n      dataSources: [{\n        subject: email.subject,\n        from: email.from,\n        date: email.date\n      }],\n      // Add archetype-specific fields based on email content\n      ...this.extractArchetypeFields(email)\n    }));\n  }\n\n  // Map email to archetype (simplified - would use AI classification in production)\n  mapToArchetype(email) {\n    const subject = (email.subject || '').toLowerCase();\n    const from = (email.from || '').toLowerCase();\n    \n    if (subject.includes('field trip') || subject.includes('school') || from.includes('school')) {\n      return 'caregiver';\n    }\n    if (subject.includes('demo') || subject.includes('sales') || from.includes('sales')) {\n      return 'sales_hunter';\n    }\n    if (subject.includes('budget') || subject.includes('approval') || from.includes('finance')) {\n      return 'transactional_leader';\n    }\n    if (subject.includes('deal') || subject.includes('sale') || from.includes('deals')) {\n      return 'deal_stacker';\n    }\n    if (subject.includes('flight') || subject.includes('check-in') || from.includes('airlines')) {\n      return 'status_seeker';\n    }\n    if (subject.includes('password') || subject.includes('security') || from.includes('security')) {\n      return 'identity_manager';\n    }\n    if (subject.includes('project') || subject.includes('milestone') || from.includes('client')) {\n      return 'project_coordinator';\n    }\n    \n    return 'enterprise_innovator'; // Default to learning\n  }\n\n  // Determine priority based on email content\n  determinePriority(email) {\n    const subject = (email.subject || '').toLowerCase();\n    const snippet = (email.snippet || '').toLowerCase();\n    \n    if (subject.includes('urgent') || subject.includes('asap') || subject.includes('immediate')) {\n      return 'critical';\n    }\n    if (subject.includes('important') || subject.includes('due') || snippet.includes('deadline')) {\n      return 'high';\n    }\n    if (subject.includes('fyi') || subject.includes('newsletter') || subject.includes('update')) {\n      return 'low';\n    }\n    \n    return 'medium'; // Default\n  }\n\n  // Generate High Priority Action\n  generateHPA(email) {\n    const archetype = this.mapToArchetype(email);\n    const priority = this.determinePriority(email);\n    \n    if (priority === 'critical') {\n      switch (archetype) {\n        case 'caregiver': return 'Sign & Send';\n        case 'sales_hunter': return 'Schedule Demo';\n        case 'transactional_leader': return 'Review & Approve';\n        case 'identity_manager': return 'Verify Identity';\n        default: return 'Take Action';\n      }\n    }\n    \n    switch (archetype) {\n      case 'caregiver': return 'Acknowledge';\n      case 'sales_hunter': return 'Route to CRM';\n      case 'transactional_leader': return 'Auto-Route';\n      case 'deal_stacker': return 'Claim Deal';\n      case 'status_seeker': return 'Check In Now';\n      case 'identity_manager': return 'Confirm or Deny';\n      case 'project_coordinator': return 'File by Project';\n      case 'enterprise_innovator': return 'Save for Later';\n      default: return 'Review';\n    }\n  }\n\n  // Generate meta-CTA\n  generateMetaCTA(email) {\n    const hpa = this.generateHPA(email);\n    const archetype = this.mapToArchetype(email);\n    \n    if (archetype === 'deal_stacker' || archetype === 'status_seeker') {\n      return `Swipe Right: ${hpa}`;\n    }\n    \n    return `Swipe Right: ${hpa}`;\n  }\n\n  // Extract archetype-specific fields\n  extractArchetypeFields(email) {\n    const archetype = this.mapToArchetype(email);\n    const fields = {};\n    \n    // Add archetype-specific data extraction logic here\n    // For now, return basic structure\n    \n    return fields;\n  }\n\n  // Format timestamp\n  formatTimeAgo(internalDate) {\n    if (!internalDate) return 'Unknown';\n    \n    const emailDate = new Date(parseInt(internalDate));\n    const now = new Date();\n    const diffMs = now - emailDate;\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffHours < 1) return 'Just now';\n    if (diffHours < 24) return `${diffHours}h ago`;\n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays}d ago`;\n    return `${Math.floor(diffDays / 7)}w ago`;\n  }\n\n  // Check if user has valid credentials\n  async checkAuthentication(userEmail) {\n    try {\n      const response = await this.apiClient.get(`/api/users/${userEmail}/status`);\n      return response.data.hasCredentials;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Get available user accounts\n  async getAvailableAccounts() {\n    try {\n      // This would list available credential files\n      // For now, return the known accounts from your setup\n      return [\n        { email: 'hanson@rationalework', displayName: 'Hanson (Work)' },\n        { email: 'thematthanson@gmail.com', displayName: 'Matt (Personal)' }\n      ];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  // Process emails through backend pipeline\n  async processEmails(userEmail, options = {}) {\n    try {\n      const response = await this.apiClient.post(`/api/users/${userEmail}/process`, {\n        maxEmails: options.maxEmails || 50,\n        outputFormats: ['card'],\n        includeMultipleFormats: false\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error processing emails:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new EmailAdapter();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}